cmake_minimum_required(VERSION 2.8.3)
set(PROJECT_NAME camera_overlay)
project(${PROJECT_NAME})

if(NOT ROS_BUILD_TYPE)
  set(ROS_BUILD_TYPE "Release" CACHE STRING
      "Choose the type of build, options are: Debug Release
RelWithDebInfo MinSizeRel."
      FORCE)
endif(NOT ROS_BUILD_TYPE)

set(ROS_BUILD_TYPE Release)

### Use version 2011 of C++ (c++11). By default ROS uses c++98
#see: http://stackoverflow.com/questions/10851247/how-to-activate-c-11-in-cmake
#see: http://stackoverflow.com/questions/10984442/how-to-detect-c11-support-of-a-compiler-with-cmake
add_definitions(-std=c++11)
#add_definitions(-std=c++0x)
#add_definitions(-std=c++03)


# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries

# Compiler-specific C++11 activation.
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    execute_process(
        COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    if (NOT (GCC_VERSION VERSION_GREATER 4.7 OR GCC_VERSION VERSION_EQUAL 4.7))
        message(FATAL_ERROR "${PROJECT_NAME} requires g++ 4.7 or greater.")
    endif ()
elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
else ()
    message(FATAL_ERROR "Your C++ compiler does not support C++11.")
endif ()

set(SOURCE_DIR	src/)
set(INCLUDE_DIR	include/)


set(SOURCE_FILES
        ${SOURCE_DIR}/cam.cpp	
	${INCLUDE_DIR}/cam.h	
	)
      
find_package(catkin REQUIRED 
                COMPONENTS sensor_msgs cv_bridge roscpp std_msgs image_transport droneMsgsROS)
catkin_package(
        CATKIN_DEPENDS sensor_msgs cv_bridge roscpp std_msgs image_transport droneMsgsROS
  )
find_package(OpenCV)

include_directories(
  ${catkin_INCLUDE_DIRS}
  ${OpenCV_INCLUDE_DIRS}
)
add_library(camera_overlay_lib ${SOURCE_FILES})
add_dependencies(camera_overlay_lib ${catkin_EXPORTED_TARGETS})
target_link_libraries(camera_overlay_lib ${catkin_LIBRARIES})
target_link_libraries(camera_overlay_lib ${OpenCV_LIBS} )
target_link_libraries(camera_overlay_lib ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})


add_executable(camera_overlay_main ${SOURCE_FILES})
add_dependencies(camera_overlay_main ${catkin_EXPORTED_TARGETS})
target_link_libraries(camera_overlay_main camera_overlay_lib)
target_link_libraries(camera_overlay_main ${catkin_LIBRARIES})
target_link_libraries(camera_overlay_main ${OpenCV_LIBS} )
target_link_libraries(camera_overlay_main ${catkin_LIBRARIES} ${OpenCV_LIBRARIES})
